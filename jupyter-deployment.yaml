apiVersion: apps/v1
kind: Deployment
metadata:
  name: jupyter-notebook-deployment
  labels: # задаем метки
    app: jupyter-notebook # Лейбл, указывающий на название приложения
    tier: frontend # Лейбл, указывающий на уровень приложения (фронтенд)
    environment: production # Среда развертывания (продакшн)
    version: v1.0 # Версия приложения
    owner: dev-team # Команда, ответственная за приложение
spec:
  replicas: 1 # количество реплик
  selector:
    matchLabels:
      app: jupyter-notebook
  template:
    metadata:
      labels:
        app: jupyter-notebook # Лейбл, который будет применен к создаваемым подам
        tier: frontend
        environment: production # Среда развертывания для подов
        version: v1.0 # Версия приложения для подов
        owner: dev-team # Команда, ответственная за приложение
    spec:
      containers:
      - name: jupyter-notebook # имя контейнера
        image: my-jupyter-notebook # имя собранного образа Docker для Jupyter Notebook
        imagePullPolicy: Never # явно указываем, что образ не будет загружаться из реестра, а используется локально
        ports:
        - containerPort: 8888 # порт, на котором контейнер будет слушать входящие запросы (стандартный порт для Jupyter Notebook)
        env: # переменные окружения
        - name: JUPYTER_ENABLE_LAB # Добавляем переменную окружения из ConfigMap
          valueFrom:
            configMapKeyRef: # ссылка на конфиг-мап
              name: jupyter-postgres-config # Используем созданный ConfigMap
              key: JUPYTER_ENABLE_LAB # ключ в конфиг-мапе
        - name: DATABASE_URL # Формируем URL подключения к базе данных
          value: "postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@postgres-service:5432/$(POSTGRES_DB)"
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_DB
        readinessProbe:
          httpGet:
            path: /health  # Путь для проверки готовности Jupyter Notebook.
            port: 8888     # Порт, на котором работает Jupyter Notebook.
          initialDelaySeconds: 30 # Задержка перед первой проверкой готовности (в секундах).
          periodSeconds: 10       # Интервал между проверками готовности (в секундах).
          timeoutSeconds: 5       # Время ожидания ответа от проверки (по умолчанию 1 секунда).
          failureThreshold: 5      # Количество неудачных проверок перед тем, как контейнер будет считаться неготовым.
      initContainers: # контейнеры-инициализаторы
      - name: wait-for-postgres # Инициализирующий контейнер для ожидания PostgreSQL
        image: busybox
        command: ['sh', '-c', 'for i in {1..30}; do nc -z postgres-service 5432 && echo \
        "Initialization complete: PostgreSQL database is operational." && exit 0; echo waiting for postgres; \
        sleep 5; done; echo "PostgreSQL did not start in time!"; exit 1']
